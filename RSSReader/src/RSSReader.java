import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 * 
 * @author Jordan L. McMillan
 * 
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * 
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body> <h1>the page title inside a link to the <channel> link <h1>
     * <p>
     * the channel description
     * </p>
     * <table>
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     * 
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates {@code out.content}
     * @requires <pre>
     * 
     *           {@code [the root of channel is a <channel> tag] and
     *           out.is_open}
     * 
     *           </pre>
     * @ensures <pre>
     * 
     *          {@code out.content = #out.content * [the HTML "opening" tags]}
     * 
     *          </pre>
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<body>");
        out.println("<a href=\""
                + channel.child(getChildElement(channel, "link")).child(0)
                + "\" >"
                + channel.child(getChildElement(channel, "title")).child(0)
                + "</a>");
        out.println("<p>"
                + channel.child(getChildElement(channel, "description")).child(
                        0) + "</p>");
        out.println("<table border=\"1\" >");
        out.println("<tr>");

        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * 
     * </table> </body> </html>
     * 
     * @param out
     *            the output stream
     * @updates {@code out.contents}
     * @requires <pre>
     * {@code out.is_open}
     * </pre>
     * @ensures <pre>
     * {@code out.content = #out.content * [the HTML "closing" tags]}
     * </pre>
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     * 
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires <pre>
     * {@code [the label of the root of xml is a tag]}
     * </pre>
     * @ensures <pre>
     * {@code getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]}
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     * 
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates {@code out.content}
     * @requires <pre>
     * {@code [the label of the root of item is an <item> tag] and out.is_open}
     * </pre>
     * @ensures <pre>
     * {@code out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]}
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr> ");

        /*
         * This first column will be for the publication date. if the
         * publication date doesn't not exist then it will output the
         * "Empty Title."
         */

        if (getChildElement(item, "pubDate") != -1
                && item.child(getChildElement(item, "pubDate"))
                        .numberOfChildren() >= 1) {
            out.println("<td>"
                    + item.child(getChildElement(item, "pubDate")).child(0)
                    + "</td>");
        } else {
            out.println("<td>Empty Title</td>");
            out.println(item.child(getChildElement(item, "pubDate"))
                    .numberOfChildren());
        }
        /*
         * The second column will be for the source, if present, which will be
         * linked to the source url or if not there it will output
         * "source not available."
         */

        if (getChildElement(item, "source") == -1) {
            out.println("<td>no source</td>");

        } else {
            out.println("<td>"
                    + "<a href=\""
                    + item.child(getChildElement(item, "source"))
                            .attributeValue("url")
                    + "\">"
                    + item.child(getChildElement(item, "source")).child(0)
                            .label() + "</a></td>");
        }
        /*
         * The third column will be for the title, if present and not empty, or
         * the description, if not empty, or "No Title available" which will be
         * linked if a link for the news item is available.
         */
        int linkIndex = getChildElement(item, "link");
        boolean linkFound = linkIndex > -1;

        if (getChildElement(item, "title") == -1
                || item.child(getChildElement(item, "title"))
                        .numberOfChildren() == 0) {
            if (getChildElement(item, "description") == -1
                    || item.child(getChildElement(item, "description"))
                            .numberOfChildren() == 0) {

                out.print("<td>");
                if (linkFound) {
                    out.print("<a href=\"");
                    out.print(item.child(getChildElement(item, "link"))
                            .child(0).label());
                    out.print("\">");

                }
                out.print("No title available");
                if (linkFound) {
                    out.print("</a>");
                }
                out.println("</td>");
            } else {
                out.print("<td>");
                if (linkFound) {
                    out.print("<a href=\"");
                    out.print(item.child(getChildElement(item, "description"))
                            .child(0).label());
                    out.print("\">");

                }
                out.print("No title available");
                if (linkFound) {
                    out.print("</a>");
                }
                out.println("</td>");
            }

        } else {
            out.print("<td>");
            if (linkFound) {
                out.print("<a href=\"");
                out.print(item.child(getChildElement(item, "link")).child(0)
                        .label());
                out.print("\">");

            }
            out.print(item.child(getChildElement(item, "title")).child(0)
                    .label());
            if (linkFound) {
                out.print("</a>");
            }
            out.println("</td>");
        }

        out.println("</tr>");
    }

    /**
     * Main method.
     * 
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleWriter consoleOut = new SimpleWriter1L();
        consoleOut
                .println("Please enter a URL of your choice(must be version 2.0): ");
        SimpleReader in = new SimpleReader1L();
        String url = in.nextLine();
        XMLTree xml = new XMLTree1(url);

        /*
         * checks to make sure this is a valid RSS XML document with the version
         * of 2.0
         */
        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {

            consoleOut
                    .println("Enter the file name for the output file(do not follow name with .html): ");
            String fileName = in.nextLine() + ".htm";
            SimpleWriter out = new SimpleWriter1L(fileName);
            XMLTree channel = xml.child(0);
            outputHeader(channel, out);
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), out);
                }
            }
            outputFooter(out);
            out.close();

        } else {
            consoleOut
                    .println("Invalid RSS document. Must be a RSS with version 2.0");
        }

        //http://news.yahoo.com/rss/
        consoleOut.close();
        in.close();
    }

}